#! /bin/bash -u
#PBS -q mg32
#PBS -l select=16:ncpus=48:mpiprocs=4:ompthreads=12:ngpus=4
#PBS -l walltime=24:0:0
#PBS -P culb2d@PG23016
#PBS -N fdr_rev
#PBS -o log/
#PBS -j oe
if [ -n "${PBS_O_WORKDIR:-}" ]; then
    cd $PBS_O_WORKDIR
fi
logfile=log/${PBS_JOBNAME:-logfile}.txt
set -o pipefail

# global
is_skip=false
d=230927_fdr_gamma_opt/cusolver

  ## maybe unchanged
rloc=1
daprune=10
iop=$daprune
bindiff=true
iodata=false ## warning: very storage-consuming, use carefully

{ # global block for `tee`

    # modules
    . /etc/profile.d/modules.sh 
    module purge 
    module load mpt/2.23-ga cuda/11.0 gnu/7.4.0; export MPI_USE_CUDA=1
    module use --append $HOME/ulocal/modulefiles
    module load boost
    module load hdf5/1.8.12

    module list 2>&1 

    # environmental variables
    export MPI_DSM_VERBOSE=1
    export OMP_NUM_THREADS=12

    run () {
        N=$1
        p=$2
        beta=$3
        gamma=$4
        err_rho=$5
        err_u=$6

        local RESULT_DIR=result/$d/ens${N}/xyprune${p}
        mkdir -p $RESULT_DIR
        if $is_skip && [ -f "$RESULT_DIR/.complete" ]; then
            echo $RESULT_DIR: already completed. skip.
            return 0
        fi
        if $is_skip && [ -f "$RESULT_DIR/.progress" ]; then
            echo $RESULT_DIR: maybe in progress. skip.
            return 0
        fi
        touch $RESULT_DIR/.progress

        echo =============================================================================
        echo start run N=$N xyprune=$p err_rho=$err_rho err_u=$err_u beta=$beta 
        echo =============================================================================

        # machine-dependent mpirun options
        run_mpirun() {
            mpirun -np $1 omplace run/a.out
        }

        ## config
        da_opts="DA_XYPRUNE=$p DAPRUNE=$daprune IOPRUNE=$iop OBS_ERROR_RHO=$err_rho OBS_ERROR_U=$err_u"

        ## obs
        make clean resultclean
        make -j TEST=OBSERVE $da_opts
        run_mpirun 1
        if $bindiff && [ $p -eq 1 ]; then
            make -C bindiff test_obs
            mv -v bindiff/test/test_obs.csv $RESULT_DIR/test_obs.csv
            make -C bindiff D=RMSE_RHO test_obs
            mv -v bindiff/test/test_obs.csv $RESULT_DIR/test_rho_obs.csv
        fi
        if $iodata; then
            rsync -auv io/ $RESULT_DIR/io_obs/
            find $RESULT_DIR/io_obs/ -depth -empty -delete
        fi

        ## nudging
        make clean
        git clean -fx io/calc/
        make -j TEST=DA_NUDGING $da_opts 
        run_mpirun 1
        if $bindiff; then
            make -C bindiff test_calc
            mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_nudging.csv
            make -C bindiff D=RMSE_RHO test_calc
            mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_nudging_rho.csv
        fi
        if $iodata; then
            rsync -auv io/ $RESULT_DIR/io_nud/
            find $RESULT_DIR/io_nud/ -depth -empty -delete
        fi

        ## no data assimilation
        make clean
        git clean -fx io/calc/
        make -j TEST=DA_DUMMY $da_opts
        run_mpirun 1
        if $bindiff; then
            make -C bindiff test_calc
            mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_noda.csv
            make -C bindiff D=RMSE_RHO test_calc
            mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_noda_rho.csv
        fi
        if $iodata; then
            rsync -auv io/ $RESULT_DIR/io_noda/
            find $RESULT_DIR/io_noda/ -depth -empty -delete
        fi

        ## letkf
        make clean
        git clean -fx io/calc/
        make -j TEST=DA_LETKF $da_opts LETKF_COVINF=$beta LETKF_RLOC_LEN=$rloc
        run_mpirun $N
        if $bindiff; then
            mkdir -p $RESULT_DIR/letkf$N
            make -C ensemble_stat test N=$N
            mv -v ensemble_stat/test/test_ensemble.csv $RESULT_DIR/test_letkf$N.csv
        fi
        if $iodata; then
            rsync -auv io/ $RESULT_DIR/io_letkf/
            find $RESULT_DIR/io_letkf/ -depth -empty -delete
        fi


        ## checkpoint
        rm $RESULT_DIR/.progress
        touch $RESULT_DIR/.complete

        ## clean
        make resultclean
    }

    # run optimal cases
    err_rho=0.01
    err_u=0.1
    run 64  1 1    0.11 $err_rho $err_u
    run 64  2 1    0.11 $err_rho $err_u
    run 64  4 1    0.12 $err_rho $err_u
    run 64  8 1    0.19 $err_rho $err_u
    run 64 16 1    0.22 $err_rho $err_u
    run 64 32 1    0.31 $err_rho $err_u
    run 64 64 1.02 0.22 $err_rho $err_u

    run 16  1 1    0.11 $err_rho $err_u
    run 16  2 1    0.11 $err_rho $err_u
    run 16  4 1    0.12 $err_rho $err_u
    run 16  8 1.01 0.22 $err_rho $err_u
    run 16 16 1.01 0.31 $err_rho $err_u
    run 16 32 1.03 0.22 $err_rho $err_u

    run  4  1 1.07 0.11 $err_rho $err_u
    run  4  2 1.05 0.11 $err_rho $err_u
    run  4  4 1.05 0.12 $err_rho $err_u
    run  4  8 1.09 0.19 $err_rho $err_u
    run  4 16 1.24 0.22 $err_rho $err_u

} |& tee $logfile
