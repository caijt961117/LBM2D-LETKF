#! /bin/bash -u
#PJM -L node=8
#PJM -L rscgrp=regular-a
#PJM -L elapse=6:0:0
#PJM -s
#PJM -j
#PJM -o log/io.txt
#PJM -g jh220030a
#PJM --mpi proc=64

# modules
. /etc/profile.d/modules.sh 
module purge 
module load gcc/8.3.1
module load cuda/11.4
module load ompi-cuda/4.1.1-11.4
module load hdf5/1.12.0

module list 2>&1 

# environmental variables
# default: export UCX_MEMTYPE_CACHE=n; export UCX_IB_GPU_DIRECT_RDMA=no
export UCX_MEMTYPE_CACHE=n
export UCX_IB_GPU_DIRECT_RDMA=no
export UCX_RNDV_THRESH=0
export OMP_NUM_THREADS=6

# firstly make EigenG-Batch
make -C src/EigenG-Batch

env

run () {
N=$1
p=$2
beta=$3
daprune=10
o=ruv
d=1104_obserr_rho001_u01
mp4=false
bindiff=true ## usually ! $mp4
iodata=true ## warning: very storage-consuming, use carefully
$mp4 && iop=1 || iop=$daprune

echo ======================================================
echo start run N=$N daprune=$daprune xyprune=$p beta=$beta
echo ======================================================


RESULT_DIR=result/$d/observe_$o/ens${N}_xyprune${p}/beta${beta}
#RESULT_DIR=result/$d/observe_$o/ens${N}_xyprune${p}/beta_opt
mkdir -p $RESULT_DIR

# func
run_mpirun() {
    #n=$PJM_MPI_PROC
    n=$1
    mpiexec -machinefile $PJM_O_NODEINF -np $n -npernode 8 run/a.out
    2>&1
}

make clean resultclean

## obs
make clean 
make -j TEST=OBSERVE DA_XYPRUNE=$p IOPRUNE=$iop DAPRUNE=$daprune
run_mpirun 1
if $bindiff; then
    make -C bindiff test_obs
    mv -v bindiff/test/test_obs.csv $RESULT_DIR/test_obs.csv
fi

## noda
make clean
make -j TEST=DA_DUMMY DA_XYPRUNE=$p IOPRUNE=$iop DAPRUNE=$daprune
run_mpirun 1
# plot noda/obs/nature
if $mp4; then
    ./plot.sh --ffmpeg --matplotlib
    mv -v result/calc_vor.mp4 $RESULT_DIR/calc_noda_vor.mp4
    mv -v result/nc_vor.mp4 $RESULT_DIR/nc_noda_vor.mp4
    mv -v result/nature_vor.mp4 $RESULT_DIR/
    mv -v result/obs_vor.mp4 $RESULT_DIR/
fi
if $bindiff; then
    make -C bindiff test_calc
    mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_noda.csv
fi
if $iodata; then
    rsync io/ -va --include '**/' --include '**/*.dat' --exclude '*' $RESULT_DIR/io_noda/
    find $RESULT_DIR/io_noda/ -depth -empty -delete
fi

## letkf
make clean
make -j TEST=DA_LETKF DA_XYPRUNE=$p DAPRUNE=$daprune IOPRUNE=$iop LETKF_COVINF=$beta
run_mpirun $N
# plot letkf
if $mp4; then
    ./plot.sh --ffmpeg --matplotlib
    mv -v result/calc_ens_vor_mean.mp4 $RESULT_DIR/calc_letkf_ens_vor_mean.mp4
    mkdir -p $RESULT_DIR/letkf_each_member
    for k in {0..15}; do
        mv -v result/calc_vor_$k.mp4 $RESULT_DIR/letkf_each_member/
    done
    rm -v result/*.mp4
fi
if $bindiff; then
    make -C bindiff test_calc_ens N=$N
    mkdir -p $RESULT_DIR/letkf$N
    mv -v bindiff/test/test_cal_ens_*.csv $RESULT_DIR/letkf$N/
    make -C ensemble_stat test N=$N
    mv -v ensemble_stat/test/test_ensemble.csv $RESULT_DIR/test_letkf$N.csv
fi
if $iodata; then
    rsync io/ -va --include '**/' --include '**/*.dat' --exclude '*' -v $RESULT_DIR/io_letkf/
    find $RESULT_DIR/io_noda/ -depth -empty -delete
fi

## nudging
make clean
make -j TEST=DA_NUDGING DA_XYPRUNE=$p DAPRUNE=$daprune IOPRUNE=$iop
run_mpirun 1
# plot nature
if $mp4; then
    ./plot.sh --ffmpeg --matplotlib
    mv -v result/calc_vor.mp4 $RESULT_DIR/calc_nud_vor.mp4
    mv -v result/nc_vor.mp4 $RESULT_DIR/nc_nud_vor.mp4
fi
if $bindiff; then
    make -C bindiff test_calc
    mv -v bindiff/test/test_cal.csv $RESULT_DIR/test_cal_nudging.csv
fi
if $iodata; then
    rsync io/ -va --include '**/' --include '**/*.dat' --exclude '*' -v $RESULT_DIR/io_nud/
    find $RESULT_DIR/io_nud/ -depth -empty -delete
    rm -rvf $RESULT_DIR/io_nud/calc/{1..64}
fi

}

### opt
#run 4 1 1.04
#run 4 2 1.11
#run 4 4 1.15
#run 4 8 1.3
#run 4 16 1.3
### p>=16 died

#### others
#run 16 1 1
#run 16 2 1
#run 16 4 1.02
#run 16 8 1.02
#run 16 16 1.1
#run 16 32 1
#### p>=32 died

#run 64 1 1
#run 64 2 1
#run 64 4 1
#run 64 8 1
#run 64 16 1.01
#run 64 32 1.04
run 64 64 1.26
#

### seeking beta
#for beta in 1 1.01 1.02 1.03 1.04; do
#for beta in 1.05 1.06 1.07 1.08 1.09; do
#for beta in 1.1 1.11 1.12 1.13 1.14; do
#for beta in 1.15 1.16 1.17 1.18 1.19; do
#for beta in 1.2 1.21 1.22 1.23 1.24; do
#for beta in 1.25 1.26 1.27 1.28 1.29 1.3; do
#    for p in 16 32 64; do
#        run 64 $p $beta
#    done
#done
